你好
哈哈
你好吗
海贼
王志鹏
我是小海贼
小海贼
小小的
呵呵
干啥啊
嘎哈



基于Socket的Linux服务器集群监控系统
项目简介：
    该系统可以实现对Linux服务器中各项性能指标的实时监控，并支持数万台Client端并发。
        基于Socket网络编程编写，并应用多路I/O复用技术（epoll，select），非阻塞IO, 采用事件驱动型编程。
            服务端采用多线程，客户端采用多进程，使用互斥锁与条件变量保护临界资源，使用进程间通信IPC。
                服务端维护存储用户连接的资源池，并控制相对负载均衡，并发数可通过配置文件按需调整。
                    使用心跳机制，通过应用层心跳来判断双方是否存活，服务端对掉线用户进行清除，客户端掉线时主动进行断线重连。
                        通过系统调用的方式执行shell脚本，从相关系统命令与系统文件来获取服务器状态信息，主要包括：CPU信息、用户信息、内存信息、磁盘信息、恶意进程监测，系统运行概况等。
                            客户端产生的日志信息首先缓存在本地，在发送到服务端数据库保存后清除本地数据，释放空间。生成日志信息时模仿回写机制，减少读写操作消耗资源。
                                底层使用TCP/IP协议进行数据传输，由服务端主动请求数据。对于长时间积压数据的收发能够有效处理，解决了粘包问题。
                                    实现将该项目以守护进程的方式启动，位于后台运行。

                                    基于Socket的多人足球小游戏
                                    项目简介：
                                        服务端采用epoll处理多人场景，基于事件驱动型编程。
                                            利用计时器itimer与信号实现足球的减速运动。
                                                底层使用TCP/IP协议进行数据传输。
                                                    
                                                    轻量级自动测试框架
                                                    项目简介：
                                                        借鉴谷歌开源测试框架, 实现单元测试功能，并且能一次进行多个单元的测试。
                                                            输出界面友好，显示错误样例，并统计错误率。
                                                                利用大量宏来进行实现，提高了测试框架的移植性和拓展性，使得可以在多种场景下进行测试。
                                                                    开发过程中使用makefile，减少不必要的编译。

                                                                    面向大规模文本的任意类型数据检索
                                                                    项目简介：
                                                                        构建二叉字典树，支持存储任意类型数据，优化普通字典树占用内存过多的现象。
                                                                            利用哈弗曼编码，针对不同的字符频率，优化当前场景下的字符编码，提高效率。
                                                                                采用双数组字典树保存字典，实现字典树的可迁移性，同时节省内存开销。
                                                                                    采用AC自动机实现多模匹配，实现针对大规模文本的高效检索。
                                                                                        //哈弗曼编码所需的数据由SHELL脚本获取。
